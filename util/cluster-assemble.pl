#!/usr/bin/perl

use Modern::Perl qw(2010);

use Getopt::Long qw(GetOptions);
use Term::ANSIColor qw(:constants);
use File::Basename qw(fileparse);
use File::Find qw(find);
use Data::Section::Simple qw(get_data_section);

my $base_dir = "./experiments";
my $qsub_script = "./cluster-assemble.sh";
my $kmer_length = 327;
my $assembler_wrapper_cmd = "assemble.pl";
my $assembler_cmd = "denovo-qassembler";
my $assembler_cmd_flags;
my @experiments;

say BOLD, BLUE, "Info: ", RESET, "Assembling reads with qsub.";

GetOptions (
	"base-dir=s" => \$base_dir,
	"qsub-script=s" => \$qsub_script,
	"kmer-length=i" => \$kmer_length,
	"assembler-cmd=s" => \$assembler_cmd,
	"assembler-cmd-flags=s" => \$assembler_cmd_flags,
	"assembler-wrapper-cmd=s" => \$assembler_wrapper_cmd,
);

my $find_banks = sub {
	push @experiments, $File::Find::name if ($_ =~ /-reads\.fna$/);
};
find($find_banks, $base_dir);

open (my $qsub_writer, '>', $qsub_script);

# generate a header
say $qsub_writer '#!/bin/sh';
say $qsub_writer '# clustered assembly script, generated by cluster-assemble.pl';

foreach my $experiment (@experiments) {
	my ($filename, $directory, undef) = fileparse($experiment, '.fna');
	my $cmd = "qsub -V -S $^X -o $directory/assembly.stdout -e $directory/assembly.stderr ";
	$cmd .= "$assembler_wrapper_cmd --experiment-file $experiment --assembler-cmd $assembler_cmd ";
	$cmd .= "--assembler-cmd-flags '$assembler_cmd_flags'" if defined $assembler_cmd_flags;

	say $qsub_writer $cmd;
}

say $qsub_writer 'sleep 1';
say $qsub_writer 'echo -n "Assembling..."';
say $qsub_writer get_data_section('spinner.sh');
say $qsub_writer 'spinner';

close ($qsub_writer);
chmod 0755, $qsub_script;

__DATA__

@@ spinner.sh
spinner()
{
    local delay=2
    local spinstr='|/-\'
    while [ $(qstat | wc -l) -gt 0 ]; do
        local temp=${spinstr#?}
        printf " [%c]  " "$spinstr"
        local spinstr=$temp${spinstr%"$temp"}
        sleep $delay
        printf "\b\b\b\b\b\b"
    done
    printf "    \b\b\b\b"
}

