#!/usr/bin/perl

use Modern::Perl qw(2010);
use Getopt::Long qw(GetOptions);
use Term::ANSIColor qw(:constants);
use File::Basename qw(fileparse);
use File::Find qw(find);
use Data::Section::Simple qw(get_data_section);
use Bio::SeqIO;

my $base_dir = "./experiments";
my $qsub_script = "./cluster-needle.sh";
my $needle_wrapper_cmd = "./needle.pl";
my $additional_path;
my @experiments;

say BOLD, BLUE, "Info: ", RESET, "Aligning contigs to references with qsub.";

GetOptions (
	"base-dir=s" => \$base_dir,
	"qsub-script=s" => \$qsub_script,
	"needle-wrapper-cmd=s" => \$needle_wrapper_cmd,
	"additional-path=s" => \$additional_path,
);

my $find_contigs = sub {
	push @experiments, $File::Find::name if ($_ =~ /^\d+\-filtered\.fna$/);
};
find ($find_contigs, $base_dir);

open (my $qsub_writer, '>', $qsub_script);

# generate a header
say $qsub_writer '#!/bin/sh';
say $qsub_writer '# clustered alignment script, generated by cluster-needle.pl';

foreach my $experiment (@experiments) {
	my ($filename, $directory, undef) = fileparse($experiment, '.fna');
	# separate the sequences from each file before submission.
	my $seq_in = Bio::SeqIO->new(-file => $experiment);
	while (my $seq = $seq_in->next_seq()) {
		my ($id) = $seq->primary_id =~ /(\d+)\(/;
		my $seq_file = "$experiment-$id-filtered.fna";
		my $seq_out = Bio::SeqIO->new(-file => ">$seq_file", -format => 'fasta');
		$seq_out->write_seq($seq);
		my $cmd = "qsub -V -S $^X -o $directory/$filename-$id-needle.stdout -e $directory/$filename-$id-needle.stderr ";
		$cmd .= "$needle_wrapper_cmd --experiment-file $seq_file ";
		$cmd .= "--additional-path $additional_path" if defined $additional_path;

		say $qsub_writer $cmd;
	}
}

say $qsub_writer 'sleep 1';
say $qsub_writer 'echo -n "Aligning..."';
say $qsub_writer get_data_section('spinner.sh');
say $qsub_writer 'spinner';

close ($qsub_writer);
chmod 0755, $qsub_script;

__DATA__

@@ spinner.sh
spinner()
{
    local delay=2
    local spinstr='|/-\'
    while [ $(qstat | wc -l) -gt 0 ]; do
        local temp=${spinstr#?}
        printf " [%c]  " "$spinstr"
        local spinstr=$temp${spinstr%"$temp"}
        sleep $delay
        printf "\b\b\b\b\b\b"
    done
    printf "    \b\b\b\b"
}

